// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid
  email String @unique @db.VarChar(255)
  password String?
  displayName String? @db.VarChar(255)
  photoURL String? @map("photo_url")
  phoneNumber String? @db.VarChar(255) @map("phone_number")
  bio String?
  googleSub String? @unique @map("google_sub")
  notificationPreferences Json? @map("notification_preferences")
  accountStatus Json? @map("account_status")
  privacySettings Json? @map("privacy_settings")
  // customerId for recurring payment use
  stripeCustomerId String? @unique @map("stripe_customer_id")
  isDeleted Boolean @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // one-to-one relation, not every user must have subscription
  subscription Subscription?

  completions UserCompleteChecklist[]
  documents Document[]
  favoriteServiceProviders FavoriteServiceProvider[]

  @@map("users")
}

model Category {
  id String @id @default(uuid()) @db.Uuid
  iconName String? @db.VarChar(255) @map("icon_name")
  name String @unique @db.VarChar(255)
  description String?
  itemOrder Int @unique @map("item_order")
  isDeleted Boolean @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  checkListItems Checklist[]
  documents Document[]
  // table name: plural form of the item
  @@map("categories")
}

model Checklist {
  id String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(255)
  itemOrder Int @map("item_order")

  isDeleted Boolean @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  finalizedAt DateTime? @map("finalized_at")

  category Category @relation(fields:[categoryId], references:[id])
  categoryId String @db.Uuid @map("category_id")

  completions UserCompleteChecklist[]

  @@map("checklists")
}

model UserCompleteChecklist {
  id Int @id @default(autoincrement())
  isCompleted Boolean @default(false) @map("is_completed")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields:[userId], references: [id])
  userId String @db.Uuid @map("user_id")

  checklist Checklist @relation(fields: [checklistId], references: [id])
  checklistId String @db.Uuid @map("checklist_id")

  @@map("usercompletechecklists")
}

model ServiceProvider {
  id String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(255) @unique
  categoryIds String[] // Many-to-many relation
  description String
  latitude Float?
  longitude Float?
  contactInfo Json?
  servicesOffered String[] @map("services_offered")
  operationHours Json? @map("operation_hours")
  isVerified Boolean @default(true) @map("is_verified")
  isDeleted Boolean @default(false) @map("is_deleted")
  logoUrl String? @map("logo_url")
  images Json? // Use Json instead of String[]
  averageRating Int? @map("average_rating")
  reviewCount Int? @map("review_count")
  tags Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  users FavoriteServiceProvider[] // favoriteServiceProvider

  @@map("serviceproviders")
}

model FavoriteServiceProvider {
  id Int @id @default(autoincrement())
  isDeleted Boolean @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  userId String @db.Uuid @map("user_id")
  serviceProviderId String @db.Uuid @map("service_provider_id")

  // @@id([userId,serviceProviderId]) // Composite primary key
  @@map("favoriteserviceproviders")
}

model Document {
  id String @id @default(uuid()) @db.Uuid
  user User @relation(fields:[userId], references: [id])
  userId String @db.Uuid @map("user_id")
  name String @db.VarChar(255)
  description String?
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String @db.Uuid @map("category_id")
  templateId String? @map("template_id")
  fileUrl String? @map("file_url")
  filePathInStorage String? @map("file_path_in_storage")
  localFilePath String? @map("local_file_path")
  fileName String? @map("file_name")
  fileType String? @map("file_type")
  fileSize Int? @map("file_size")
  encryptionIv String? @map("encryption_iv")
  isDeleted Boolean @default(false) @map("is_deleted")
  // Security/Access
  isPrivate Boolean? @map("is_private") 
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  // Searchability
  searchText String? @map("search_text")
  isAvailableOffline Boolean? @map("is_available_offline")
  isEncrypted Boolean?
  tags Json?
  // Optional fields
  notes String?

  @@map("documents")
}

model Subscription {
  id String @id @default(uuid()) @db.Uuid
  plan String @db.VarChar(255)
  status String @db.VarChar(255)
  activeStatus Boolean? @map("active_status")
  startDate DateTime @map("start_date")
  endDate DateTime? @map("end_date")
  createdAt DateTime @default(now()) @map("created_at")

  // since subscriptionId update when the same user cancel and recreate subscription, to keep to one-to-one relation, need to update when the subscriptionId updates
  stripeSubscriptionId String @db.VarChar(255) @map("stripe_subscription_id")
  stripePriceId String @db.VarChar(255) @map("stripe_price_id")

  user User @relation(fields: [userId],references: [id])
  userId String @db.Uuid @unique @map("user_id")

  @@map("subscriptions")
}

model PasswordResetToken {
  id Int @id @default(autoincrement())
  email String
  token String @unique
  expiresAt DateTime @map("expired_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("passwordresettokens")
}